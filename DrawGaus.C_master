//
//  DrawGaus.cpp
//
//
//  Created by Kyle Higgins on 6/16/17.
//
//


void DrawGaus(TString infile = "histos.root"){
    set_plot_style();
    gStyle->SetOptStat(0);
    gStyle->SetOptTitle(0);
    
    
    TFile *_file0 = TFile::Open(infile);
    
    TH1* hParticlepT = (TH1*)gROOT->FindObject("hParticlepT");
    TH2* hDeltaPhiMomentum[4];
    //GET RID OF THIS WHEN YOU UNCOMMENT BELOW SECTION
    char associated[50];
    for (int j=0; j<4; j++){
        hDeltaPhiMomentum[j] = (TH2*)gROOT->FindObject(Form("hDeltaPhiMomentum%i",j));
    }
    //Define arrays for later
    
    TH1F* hDummy = new TH1F("dummy", "dummy title", 100, 2, 9);
    hDummy->GetYaxis()->SetRangeUser(.1 ,3);
    
    
    
    TH1* HistProjection[16];                  //array for 16 histograms
    char legend[50];                 //used in making legend for display, 50 is ambiguous, if you dont give info for all of them, then only the ones with enough info show up
    double bin0[5];                 //use for splitting bins, which we actually need to cut the P associated. We can't do it any other way, we must use the bins
    double bin1[5];
    double bin2[5];
    double bin3[5];
    double bin[5]={0.5, 1.0, 1.5, 2.5, 4.0};
    Double_t sigmaa[16];
    //Double_t sigmaas[16];
    Double_t sigmab[16];
    //Double_t sigmabs[16];
    Double_t sigsuma1[4];
    Double_t sigsuma2[4];
    Double_t sigsuma3[4];
    Double_t sigsuma4[4];
    Double_t sigsumb1[4];
    Double_t sigsumb2[4];
    Double_t sigsumb3[4];
    Double_t sigsumb4[4];
    Double_t sigerrora[16];
    //Double_t sigerroras[16];
    Double_t sigerrorb[16];
    //Double_t sigerrorbs[16];
    Double_t sigsumerrora1[4];
    Double_t sigsumerrora2[4];
    Double_t sigsumerrora3[4];
    Double_t sigsumerrora4[4];
    Double_t sigsumerrorb1[4];
    Double_t sigsumerrorb2[4];
    Double_t sigsumerrorb3[4];
    Double_t sigsumerrorb4[4];
    
    
    
    //Find bin numbers for cuts of P associative
    for (int j=0; j<5; j++){
        
        bin0[j]= hDeltaPhiMomentum[0]->GetYaxis()->FindBin(bin[j]);   //figures out which bins make the cut for momentum ranges which were defined in other file
        bin1[j]= hDeltaPhiMomentum[1]->GetYaxis()->FindBin(bin[j]);
        bin2[j]= hDeltaPhiMomentum[2]->GetYaxis()->FindBin(bin[j]);
        bin3[j]= hDeltaPhiMomentum[3]->GetYaxis()->FindBin(bin[j]);
    }
    
    //Project y axis for P associative
    for (int j=0; j<4; j++){                                        //takes care of first row
        //Forms info together
        HistProjection[j] = hDeltaPhiMomentum[0]->ProjectionX(Form("HistProjection%i",j),bin0[j],bin0[j+1]);
        HistProjection[j+4] = hDeltaPhiMomentum[1]->ProjectionX(Form("HistProjection%i",j+4),bin1[j],bin1[j+1]);
        HistProjection[j+8] = hDeltaPhiMomentum[2]->ProjectionX(Form("HistProjection%i",j+8),bin2[j],bin2[j+1]);
        HistProjection[j+12] = hDeltaPhiMomentum[3]->ProjectionX(Form("HistProjection%i",j+12),bin3[j],bin3[j+1]);
        
    }
    
    TCanvas* can4 = new TCanvas("can4","",1000,500);     //my addition
    can4->Divide(4,4,0);      //divides into 4x4
    //normalization attempt
    
    double NormTrig0 = hParticlepT->Integral(hParticlepT->FindBin(2.5),hParticlepT->FindBin(3.0));  //find number of trigger events in given momentum ranges for hParticlepT
    double NormTrig1 = hParticlepT->Integral(hParticlepT->FindBin(3.0),hParticlepT->FindBin(4.0));
    double NormTrig2 = hParticlepT->Integral(hParticlepT->FindBin(4.0),hParticlepT->FindBin(6.0));
    double NormTrig3 = hParticlepT->Integral(hParticlepT->FindBin(6.0),hParticlepT->FindBin(10.0));
    Double_t norm = 1;
    double BinWidth = HistProjection[0]->GetBinWidth(1);
    
    cout<<"BinWidth"<<BinWidth<<endl;
    cout<<"NormTrig0"<<NormTrig0<<endl;
    
    for (int j=0; j<16; j++) {
        can4->cd(j+1);
        gPad->SetLeftMargin(0.15);
        SetHist(HistProjection[j], "#Delta #Phi", "Counts (Normalized)" ,1);
        
        if (j==0 || j==4 || j==8 || j==12)
            HistProjection[j]->Scale(norm/(BinWidth*NormTrig0));
        if (j==1 || j==5 || j==9 || j==13)
            HistProjection[j]->Scale(norm/(BinWidth*NormTrig1));
        if (j==2 || j==6 || j==10 || j==14)
            HistProjection[j]->Scale(norm/(BinWidth*NormTrig2));
        if (j==3 || j==7 || j==11 || j==15)
            HistProjection[j]->Scale(norm/(BinWidth*NormTrig3));
        
        HistProjection[j]->Draw();
        
        TF1* doublegausa = new TF1(Form("f%i",j), "gaus(0)+gaus(3)",-1,1.2);
        TF1* doublegausb = new TF1(Form("g%i",j), "gaus(0)+gaus(3)",1.5,4.9);
        
        if (j==0 || j==4 || j==6 || j==7 || j==11){
            doublegausa->SetParameter(0,24);
            doublegausa->SetParameter(1,0);
            doublegausa->SetParameter(2,.25);
            doublegausa->SetParameter(3,16);
            doublegausa->SetParameter(4,0);
            doublegausa->SetParameter(5,.8);
        }
        
        
        if (j==13 || j==14 || j==15 ){
            doublegausa->SetParameter(0,6);
            doublegausa->SetParameter(1,0);
            doublegausa->SetParameter(2,.3);
            doublegausa->SetParameter(3,3);
            doublegausa->SetParameter(4,0);
            doublegausa->SetParameter(5,.8);
        }
        
        if (j==8){
            doublegausa->SetParameter(0,28);
            doublegausa->SetParameter(1,0);
            doublegausa->SetParameter(2,.3);
            doublegausa->SetParameter(3,20);
            doublegausa->SetParameter(4,0);
            doublegausa->SetParameter(5,.8);
        }
        
        
        if (j==1 || j==2 || j==3 || j==10 || j==12){
            doublegausa->SetParameter(0,16);
            doublegausa->SetParameter(1,0);
            doublegausa->SetParameter(2,.3);
            doublegausa->SetParameter(3,10);
            doublegausa->SetParameter(4,0);
            doublegausa->SetParameter(5,.8);
        }
        
        
        if (j==5){
            doublegausa->SetParameter(0,18);
            doublegausa->SetParameter(1,0);
            doublegausa->SetParameter(2,.35);
            doublegausa->SetParameter(3,15);
            doublegausa->SetParameter(4,0);
            doublegausa->SetParameter(5,.9);
        }
        
        if (j==9){
            doublegausa->SetParameter(0,18);
            doublegausa->SetParameter(1,0);
            doublegausa->SetParameter(2,.3);
            doublegausa->SetParameter(3,14);
            doublegausa->SetParameter(4,0);
            doublegausa->SetParameter(5,.9);
        }
        
        if (j==0 || j==4 || j==6 || j==7 || j==8 || j==11){
            doublegausb->SetParameter(0,24);
            doublegausb->SetParameter(1,0);
            doublegausb->SetParameter(2,.5);
            doublegausb->SetParameter(3,20);
            doublegausb->SetParameter(4,0);
            doublegausb->SetParameter(5,2);
        }

        if (j==13 || j==15){
            doublegausb->SetParameter(0,8);
            doublegausb->SetParameter(1,0);
            doublegausb->SetParameter(2,.5);
            doublegausb->SetParameter(3,4);
            doublegausb->SetParameter(4,0);
            doublegausb->SetParameter(5,2);
        }

        if (j==1 || j==2 || j==3 || j==10 || j==12){
            doublegausb->SetParameter(0,10);
            doublegausb->SetParameter(1,0);
            doublegausb->SetParameter(2,.5);
            doublegausb->SetParameter(3,6);
            doublegausb->SetParameter(4,0);
            doublegausb->SetParameter(5,2);
        }

        if (j==5 || j==9){
            doublegausb->SetParameter(0,14);
            doublegausb->SetParameter(1,0);
            doublegausb->SetParameter(2,.5);
            doublegausb->SetParameter(3,12);
            doublegausb->SetParameter(4,0);
            doublegausb->SetParameter(5,2);
        }
        
        if (j==14){
            doublegausb->SetParameter(0,5);
            doublegausb->SetParameter(1,0);
            doublegausb->SetParameter(2,.5);
            doublegausb->SetParameter(3,3.5);
            doublegausb->SetParameter(4,0);
            doublegausb->SetParameter(5,2);
        }

        if (j==6 || j==11){
            doublegausb->SetParameter(0,14);
            doublegausb->SetParameter(1,0);
            doublegausb->SetParameter(2,1);
            doublegausb->SetParameter(3,8);
            doublegausb->SetParameter(4,0);
            doublegausb->SetParameter(5,2);
        }


        HistProjection[j]->Fit(Form("f%i",j));
        HistProjection[j]->Fit(Form("g%i",j));
        
        sigmaa[j] = fabs(doublegausa->GetParameter(2));
        sigerrora[j] = fabs(doublegausa->GetParError(2));
        cout<<sigmaa[j]<<endl;
        cout<<sigerrora[j]<<endl;
        
        sigmab[j] = fabs(doublegausb->GetParameter(2));
        sigerrorb[j] = fabs(doublegausb->GetParError(2));

        
        
     /*   TFitResultPtr gausfitb = HistProjection[j]->Fit("gaus","S","E1",2.3,4.0);           old way of fitting
        sigmab[j] = fabs(gausfitb->Value(2));
        sigerrorb[j] = fabs(gausfitb->Error(2));
        cout<<sigmab[j]<<endl;
        cout<<sigerrorb[j]<<endl;
       */
        
        doublegausa->Draw("same");  //Didn't do anything, was effor to get both to show on plot; only second will
        doublegausb->Draw("same");
      //  gausfitb->Draw("same");
       // gausfitbs->Draw("same");
      
       /*   histgaus->Fill(sigmaa[j],j);
         TCanvas* can1 = new TCanvas("can1","" ,600,600);
         gPad->SetLeftMargin(0.15);
         SetHist(histgaus, "Sigma", "Pt",1);
         histgaus->Draw();
        */
        
        /* TF1 *gausfit = (TF1 *)HistProjection[j]->GetFunction("gaus");
         double sigma[j] = gausfit->GetParameter(3);
         cout<<"sigma0"<<endl; */
        
    }
    for (int j=0; j<4; j++){
        sigsuma1[j] = sigmaa[j];
        sigsuma2[j] = sigmaa[j+4];
        sigsuma3[j] = sigmaa[j+8];
        sigsuma4[j] = sigmaa[j+12];
        
        sigsumb1[j] = sigmab[j];
        sigsumb2[j] = sigmab[j+4];
        sigsumb3[j] = sigmab[j+8];
        sigsumb4[j] = sigmab[j+12];
        
        sigsumerrora1[j] = sigerrora[j];
        sigsumerrora2[j] = sigerrora[j+4];
        sigsumerrora3[j] = sigerrora[j+8];
        sigsumerrora4[j] = sigerrora[j+12];
        
        sigsumerrorb1[j] = sigerrorb[j];
        sigsumerrorb2[j] = sigerrorb[j+4];
        sigsumerrorb3[j] = sigerrorb[j+8];
        sigsumerrorb4[j] = sigerrorb[j+12];
    
        
    }
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreada1 = new TGraphErrors(4,x,sigsuma1,0,sigsumerrora1);
    TCanvas *c1 = new TCanvas("c1","Gauss-Spreada1",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    SetHist(gausspreada1,"","",2);
    gausspreada1->SetTitle("Spread of Momentum Near Trigger");
    //gausspreada1->GetYaxis()->SetRangeUser(.4,1.8);
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreada2 = new TGraphErrors(4,x,sigsuma2,0,sigsumerrora2);
    TCanvas *c2 = new TCanvas("c2","Gauss-Spreada2",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    gausspreada2->SetTitle("Spread of Momentum Near Trigger Asc2");
    SetHist(gausspreada2,"","",3);
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreada3 = new TGraphErrors(4,x,sigsuma3,0,sigsumerrora3);
    TCanvas *c3 = new TCanvas("c3","Gauss-Spreada3",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    gausspreada3->SetTitle("Spread of Momentum Near Trigger Asc3");
    SetHist(gausspreada3,"","",4);
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreada4 = new TGraphErrors(4,x,sigsuma4,0,sigsumerrora4);
    TCanvas *c4 = new TCanvas("c4","Gauss-Spreada4",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    gausspreada4->SetTitle("Spread of Momentum Near Trigger Asc4");
    SetHist(gausspreada4,"","",6);
    
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreadb1 = new TGraphErrors(4,x,sigsumb1,0,sigsumerrorb1);
    TCanvas *c5 = new TCanvas("c5","Gauss-Spreadb1",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    SetHist(gausspreadb1,"","",2);
    gausspreadb1->SetTitle("Spread of Momentum Opposed to Trigger Asc 1");
    //gausspreadb1->GetYaxis()->SetRangeUser(.7,2.5);
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreadb2 = new TGraphErrors(4,x,sigsumb2,0,sigsumerrorb2);
    TCanvas *c6 = new TCanvas("c6","Gauss-Spreadb",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    gausspreadb2->SetTitle("Spread of Momentum Opposed to Trigger Asc 2");
    SetHist(gausspreadb2,"","",3);
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreadb3 = new TGraphErrors(4,x,sigsumb3,0,sigsumerrorb3);
    TCanvas *c7 = new TCanvas("c7","Gauss-Spreadb3",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    gausspreadb3->SetTitle("Spread of Momentum Opposed to Trigger Asc 3");
    SetHist(gausspreadb3,"","",4);
    
    double x[4] = {2.7,3.5,5.0,8.0};
    TGraphErrors* gausspreadb4 = new TGraphErrors(4,x,sigsumb4,0,sigsumerrorb4);
    TCanvas *c8 = new TCanvas("c8","Gauss-Spreadb4",200,10,600,400);
    gPad->SetLeftMargin(0.15);
    gausspreadb4->SetTitle("Spread of Momentum Opposed to Trigger Asc 4");
    SetHist(gausspreadb4,"","",6);
    
    TLegend* legend1 = new TLegend(0.2,.7,0.48,0.9);
    legend1->SetHeader("Legend");
    legend1->AddEntry(gausspreada1, "2.5<Ptrig<3.0 GeV/c", "p");
    legend1->AddEntry(gausspreada2, "3.0<Ptrig<4.0 GeV/c", "p");
    legend1->AddEntry(gausspreada3, "4.0<Ptrig<6.0 GeV/c", "p");
    legend1->AddEntry(gausspreada4, "6.0<Ptrig<10.0 GeV/c", "p");
    
    
    
    TCanvas *C = new TCanvas("C","Gaus-Spread_Combined",200,10,1200,800);
    C->Divide(2,1);
    C->cd(1);
    hDummy->Draw("same");
    gausspreada1->SetMarkerColor(2);
    gausspreada1->Draw("plsame");
    gausspreada2->SetMarkerStyle(24);
    gausspreada2->SetMarkerColor(3);
    gausspreada2->Draw("plsame");
    gausspreada3->SetMarkerStyle(33);
    gausspreada3->SetMarkerColor(4);
    gausspreada3->Draw("plsame");
    gausspreada4->SetMarkerStyle(27);
    gausspreada4->SetMarkerColor(6);
    gausspreada4->Draw("plsame");
    legend1->Draw("same");
    
    C->cd(2);
    hDummy->Draw();
    gausspreadb1->SetMarkerColor(2);
    gausspreadb1->Draw("plsame");
    gausspreadb2->SetMarkerStyle(24);
    gausspreadb2->SetMarkerColor(3);
    gausspreadb2->Draw("plsame");
    gausspreadb3->SetMarkerStyle(33);
    gausspreadb3->SetMarkerColor(4);
    gausspreadb3->Draw("plsame");
    gausspreadb4->SetMarkerStyle(27);
    gausspreadb4->SetMarkerColor(6);
    gausspreadb4->Draw("plsame");
    legend1->Draw("same");

    
    
}
//for (int j=0; j<4; j++) {
//}

/*for (int j=0; j<1; j++){                            //gaussian attempt
 
 histname = "gausfit1_1";
 TF1 * gausfit1_1 = new TF1("gausfit1_1", hDeltaPhiMomentum[j],-1,1.4);
 gausfit1[j]->SetParameter(0,25);
 gausfit1[j]->SetParameter(1,0);
 gausfit1[j]->SetParameter(2,0.7);
 
 histname = Form("gausfit2[%i]",j);
 TF1 * gausfit2[j] = new TF1(Form("gausfit2[%i]",j), hDeltaPhiMomentum[j],1.4, 2*TMath::Pi()-1);
 gausfit2[j]->SetParameter(0,20);
 gausfit2[j]->SetParameter(1,3.3);
 gausfit2[j]->SetParameter(2,1);
 
 hist -> fit(gausfit1_1);
 hist -> fit(gausfit2[j]);
 
 gausfit1_1->Draw();
 //   gausfit2[j]->Draw();
 
 
 
 
 TCanvas* can1 = new TCanvas(Form("can1",j)," ",600,600);
 gPad->SetLeftMargin(0.15);
 SetHist(gausfit1_1, "Momentum fit", "#phi",1);
 gausfit1_1->Draw();
 
 TCanvas* can(j+8) = new TCanvas(Form("can%i",j+8,)" ",600,600);
 gPad->SetLeftMargin(0.15);
 SetHist(gausfit2[j], "Momentum fit", "#phi",1);
 gausfit2[j]->Draw();
 }*/


/*TF1* gausfit = new ("gausfit", hDeltaPhiMomentum0, -1, 3);
 gausfit->SetParameter(0,25);
 gausfit->SetParameter(1,0);
 gausfit->SetParameter(2,0.7);
 
 TCanvas* can5 = new TCanvas("can5","",600,600);
 gPad->SetLeftMargin(0.15);
 SetHist(gausfit,"Counts","Momentum",1);
 gausfit->Draw();
 
 */


void set_plot_style()
{
    const Int_t NRGBs = 5;
    const Int_t NCont = 255;
    Double_t stops[NRGBs] = { 0.00, 0.34, 0.61, 0.84, 1.00 };
    Double_t red[NRGBs]   = { 0.00, 0.00, 0.87, 1.00, 0.51 };
    Double_t green[NRGBs] = { 0.00, 0.81, 1.00, 0.20, 0.00 };
    Double_t blue[NRGBs]  = { 0.51, 1.00, 0.12, 0.00, 0.00 };
    TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
    gStyle->SetNumberContours(NCont);
}
void SetHist(TH1* h, char* xt ="", char* yt ="",int color = 1, int marker = 20,int width = 3, float size = 1.0)
{
    h->SetLineWidth(width);
    h->SetLineColor(color);
    h->SetMarkerColor(color);
    h->SetMarkerSize(size);
    h->SetMarkerStyle(marker);
    h->GetYaxis()->SetTitle(yt);
    h->GetYaxis()->SetTitleOffset(1.6);
    h->GetXaxis()->SetTitle(xt);
}

void SetHist(TH1* h, int color = 1)
{
    h->SetLineWidth(3);
    h->SetLineColor(color);
    h->SetMarkerColor(color);
    h->SetMarkerSize(1);
}

void SetLeg(TLegend* l,float txtsize=0.03){
    l->SetBorderSize(0);
    l->SetFillColor(0);
    l->SetTextSize(txtsize);
}


void SetHist(TGraphErrors* h, char* xt ="", char* yt ="",int color = 14, int marker = 20,int width = 2, float size = 1)
{
    h->SetLineWidth(width);
    h->SetLineColor(color);
    h->SetMarkerColor(1);
    h->SetMarkerSize(size);
    h->SetMarkerStyle(marker);
    h->GetYaxis()->SetTitle(yt);
    h->GetYaxis()->SetTitleOffset(1.6);
    h->GetXaxis()->SetTitle(xt);
}





